heat_template_version: 2013-05-23
parameters:
  key_name:
    type: string
  flavor:
    type: string
  image:
    type: string
  public_net_id:
    type: string
    description: >
      ID of public network for which floating IP addresses will be allocated
  private_net_id:
    type: string
    description: ID of private network into which servers get deployed
  private_subnet_id:
    type: string
    description: ID of private sub network into which servers get deployed

resources:
  # Secret config
  app_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        # db specific data
        - name: db_name
        - name: db_root_password
        - name: db_username
        - name: db_password
        - name: db_allowed_hosts

        # apache specific data
        - name: apache_vhost_name
        - name: apache_install_root
        - name: apache_wsgi_path
        - name: apache_static_root

        # app installation data
        - name: app_install_dir
        - name: app_git_url
        - name: app_install_script
        - name: app_db_server
        - name: app_secret_key
      outputs:
        # db specific data
        - name: db_name
        - name: db_root_password
        - name: db_username
        - name: db_password
        - name: db_allowed_hosts

        # apache specific data
        - name: apache_vhost_name
        - name: apache_install_root
        - name: apache_wsgi_path
        - name: apache_static_root

        # app installation data
        - name: app_install_dir
        - name: app_git_url
        - name: app_install_script
        - name: app_db_server
        - name: app_secret_key
      config: |
        #!/bin/bash
        set -x
        function stash_config () {
          # TODO Put this stuff in zookeeper and query with hiera in puppet?
          # many ways to do this
          val=${!1}
          echo -n $val > ${heat_outputs_path}.$1
          echo "export PROVISION_$1=$val" >> /etc/environment
        }
        # TODO Generate random passwords
        stash_config db_name
        stash_config db_root_password
        stash_config db_username
        stash_config db_password
        stash_config db_allowed_hosts

        stash_config apache_vhost_name
        stash_config apache_install_root
        stash_config apache_wsgi_path
        stash_config apache_static_root

        stash_config app_install_dir
        stash_config app_git_url
        stash_config app_install_script
        stash_config app_db_server
        stash_config app_secret_key

  app_config_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_config
      server:
        # Install the app config on the web server
        get_resource: web_server
      input_values:
        db_root_password: asillypassword
        db_name: dpaste
        db_username: dpaste
        db_password: anothersillypassword
        db_allowed_hosts: 10.0.0.%

        apache_vhost_name: dpaste
        apache_install_root: /var/www/dpaste
        apache_wsgi_path: /var/www/dpaste/wsgi.py
        apache_static_root: /var/www/dpaste/dpaste/static/

        app_install_dir: /var/www/dpaste
        app_git_url: https://github.com/uberj/dpaste.git
        app_install_script: install.sh
        app_db_server:
          # Get the internal address of the db
          get_attr: [db_server, first_address]
        app_secret_key: a-not-so-secret-key

  # App install
  app_install:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: install_dir
      - name: git_url
      - name: install_script
      outputs:
      - name: result
      config: |
        #!/bin/bash
        # TODO, why are we getting newlines?
        INSTALL_DIR=$(echo $install_dir | tr -d '\n')
        GIT_URL=$(echo $git_url | tr -d '\n')
        INSTALL_SCRIPT=$(echo $install_script | tr -d '\n')

        mkdir -p $(dirname $INSTALL_DIR)
        git clone $GIT_URL $INSTALL_DIR
        $INSTALL_DIR/$INSTALL_SCRIPT

  app_install_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_install
      server:
        # Install the app on the web server
        get_resource: web_server
      input_values:
        install_dir:
          get_attr: [app_config_deployment, app_install_dir]
        git_url:
          get_attr: [app_config_deployment, app_git_url]
        install_script:
          get_attr: [app_config_deployment, app_install_script]

  # MySQL config
  mysql_server_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: db_name
      - name: root_password
      - name: username
      - name: password
      - name: host
      outputs:
      - name: result
      config: |
        class { '::mysql::server':
          root_password     => $::root_password,
          restart           => true,
          override_options  => {
            'mysqld' => {
              'bind-address' => '0.0.0.0',
            }
          }
        }

        ::mysql::db { $::db_name:
          user     => $::username,
          password => $::password,
          host     => $::host,
          # TODO, figure out how to pass this as a param. Unicode formating is breaking things.
          # The list looks like [u'SELECT', u'UPDATE', ...] and puppet doesn't like that.
          grant    => ['SELECT', 'UPDATE', 'CREATE', 'DROP']
        }

  mysql_server_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mysql_server_config
      server:
        get_resource: db_server
      input_values:
        db_name:
          get_attr: [app_config_deployment, db_name]
        root_password:
          get_attr: [app_config_deployment, db_root_password]
        username:
          get_attr: [app_config_deployment, db_username]
        password:
          get_attr: [app_config_deployment, db_password]
        host:
          get_attr: [app_config_deployment, db_allowed_hosts]

  # MySQL client config
  mysql_client_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      outputs:
      - name: result
      config: |
        include mysql::client
        class { 'mysql::bindings':
          python_enable => true
        }

  mysql_client_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mysql_client_config
      server:
        get_resource: web_server

  # Apache config
  apache_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: vhost_name
      - name: install_root
      - name: wsgi_path
      - name: static_root
      outputs:
      - name: result
      config: |
        class {
          'apache':
            default_mods        => true,
            default_confd_files => false;
          'apache::mod::wsgi':
            wsgi_socket_prefix => '/var/run/wsgi';
        }

        apache::vhost { "$::vhost_name":
          port                        => '80',
          default_vhost               => true,
          aliases                     => [
            # TODO, what do do about this? What if an app doesn't need this?
            {alias => '/static', path => $::static_root}
          ],
          docroot                     => "$::install_root",
          wsgi_application_group      => '%{GLOBAL}',
          wsgi_daemon_process         => 'wsgi',
          wsgi_daemon_process_options => {
            processes    => '2',
            threads      => '15',
            display-name => '%{GROUP}',
          },
          wsgi_import_script          => "$::wsgi_path",
          wsgi_import_script_options  =>
            { process-group => 'wsgi', application-group => '%{GLOBAL}' },
          wsgi_process_group          => 'wsgi',
          wsgi_script_aliases         => { '/' => "$::wsgi_path" },
        }


  apache_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: apache_config
      server:
        get_resource: web_server
      input_values:
        vhost_name:
          get_attr: [app_config_deployment, apache_vhost_name]
        install_root:
          get_attr: [app_config_deployment, apache_install_root]
        wsgi_path:
          get_attr: [app_config_deployment, apache_wsgi_path]
        static_root:
          get_attr: [app_config_deployment, apache_static_root]

  # Mysql server

  db_server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      networks:
        - port: { get_resource: db_port }

  db_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }

  db_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: db_port }

  # Apache server

  web_server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      networks:
        - port: { get_resource: web_port }

  web_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }

  web_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: web_port }

outputs:
  result:
    value:
      get_attr: [mysql_server_deployment, result]
  # DB output
  db_stdout:
    value:
      get_attr: [mysql_server_deployment, deploy_stdout]
  db_stderr:
    value:
      get_attr: [mysql_server_deployment, deploy_stderr]
  db_status_code:
    value:
      get_attr: [mysql_server_deployment, deploy_status_code]

  # Web output
  web_stdout:
    value:
      get_attr: [apache_deployment, deploy_stdout]
  web_stderr:
    value:
      get_attr: [apache_deployment, deploy_stderr]
  web_status_code:
    value:
      get_attr: [apache_deployment, deploy_status_code]

  # Install App output
  app_stdout:
    value:
      get_attr: [app_install_deployment, deploy_stdout]
  app_stderr:
    value:
      get_attr: [app_install_deployment, deploy_stderr]

  mysql_client_app_stdout:
    value:
      get_attr: [mysql_client_deployment, deploy_stdout]
  mysql_client_app_stderr:
    value:
      get_attr: [mysql_client_deployment, deploy_stderr]

  web_public_ip:
    description: Floating IP address of database in public network
    value: { get_attr: [ db_floating_ip, floating_ip_address ] }
  web_public_ip:
    description: Floating IP address of webserver in public network
    value: { get_attr: [ web_floating_ip, floating_ip_address ] }
